openapi: "3.0.0"
info:
  version: 1.0.0
  title: Building Maintenance App
  # description:
  # termsOfService:
  # contact:
  #   name:
  #   email:
  #   url:
  # license:
  #   name:
  #   url:
# servers:
#   - url:
paths:
  /building:
    post:
      tags:
        - 'building'
      summary: Create building
      # description: 
      operationId: addBuilding
      requestBody:
        # description:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '200':
          description: Building added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
  /building/{id}:
    get:
      tags:
        - 'building'
      summary: Get building
      # description: 
      operationId: getBuilding
      parameters:
        - name: id
          in: path
          # description:
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Building returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        "404":
          description: Building not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
    put:
      tags:
        - 'building'
      summary: Update building
      # description: 
      operationId: updateBuilding
      parameters:
        - name: id
          in: path
          # description:
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Building updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
    delete:
      tags:
        - 'building'
      summary: Delete building
      # description: 
      operationId: deleteBuilding
      parameters:
        - name: id
          in: path
          # description:
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Building deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
  /building/{id}/works:
    get:
      tags:
        - "building"
      summary: Get building maintenance works
      # description: 
      operationId: getWorks
      parameters:
        - name: id
          in: path
          # description:
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Building maintenance works returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Work'
        "404":
          description: Building not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
  /user:
    post:
      tags:
        - 'user'
      summary: Create user
      # description: 
      operationId: addUser
      requestBody:
        # description:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
  /user/{id}:
    get:
      tags:
        - "user"
      summary: Get user
      # description: 
      operationId: getUser
      parameters:
        - name: id
          in: path
          # description:
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
    put:
      tags:
        - 'user'
      summary: Update user
      # description: 
      operationId: updateUser
      parameters:
        - name: id
          in: path
          # description:
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
    delete:
      tags:
        - 'user'
      summary: Delete user
      # description: 
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          # description:
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
components:
  schemas:
    Feedback:
      type: object
      required:
        - "id"
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/User'
        date:
          type: string
          format: date-time
        content:
          type: string
    Work:
      type: object
      required:
        - "id"
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        finishDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - closed
            - waiting
            - scheduled
            - opened
            - approved
            - rejected
            - closed        
        contractors:
          type: array
          items:
            type: string
        subcontractors:
          type: array
          items:
            type: string
    Building:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        localization:
          type: string
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        role:
          type: string
          enum:
            - inspector
            - manager
            - supervisor